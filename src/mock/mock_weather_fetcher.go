// Code generated by MockGen. DO NOT EDIT.
// Source: weather_stack_service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	model "github.com/ColinSchofield/zai-weather/src/model"
	gomock "github.com/golang/mock/gomock"
)

// MockWeatherFetcher is a mock of WeatherFetcher interface.
type MockWeatherFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockWeatherFetcherMockRecorder
}

// MockWeatherFetcherMockRecorder is the mock recorder for MockWeatherFetcher.
type MockWeatherFetcherMockRecorder struct {
	mock *MockWeatherFetcher
}

// NewMockWeatherFetcher creates a new mock instance.
func NewMockWeatherFetcher(ctrl *gomock.Controller) *MockWeatherFetcher {
	mock := &MockWeatherFetcher{ctrl: ctrl}
	mock.recorder = &MockWeatherFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWeatherFetcher) EXPECT() *MockWeatherFetcherMockRecorder {
	return m.recorder
}

// FetchWeather mocks base method.
func (m *MockWeatherFetcher) FetchWeather(ctx context.Context, location string) (*model.Weather, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchWeather", ctx, location)
	ret0, _ := ret[0].(*model.Weather)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchWeather indicates an expected call of FetchWeather.
func (mr *MockWeatherFetcherMockRecorder) FetchWeather(ctx, location interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchWeather", reflect.TypeOf((*MockWeatherFetcher)(nil).FetchWeather), ctx, location)
}
